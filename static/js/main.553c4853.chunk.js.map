{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTask","trimmedTitle","trim","addItem","TextField","variant","label","helperText","size","value","onChange","e","currentTarget","onKeyDown","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","Task","onClickTaskTitle","useCallback","newValue","changeTaskTitle","task","id","todolistId","className","isDone","Checkbox","changeTaskStatus","checked","removeTask","Delete","TodoList","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tittle","changeTodoListTitle","tasksforTodoList","tasks","filter","removeTodoList","style","listStyle","paddingLeft","map","Button","initialState","AppWithRedux","v1","todoLists","useSelector","state","todolists","dispatch","useDispatch","taskID","todoListID","action","type","RemoveTaskAC","AddTaskAC","newFilterValue","ChangeTaskStatusAC","ChangeTaskTittleAC","newvalue","addTodoLists","todolistID","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","Paper","elevation","marginRight","rootReducer","combineReducers","newTask","todolistTasks","newTodoList","newTodoLists","find","todoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.553c4853.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addTask()\r\n        if (e.key === \"Escape\") setTitle(\"\")\r\n    }\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(trimmedTitle)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError('Title is requaired')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       error={!!error}\r\n                // className={error ? \"error\" : \"\"}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       size={\"small\"}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={onKeyDownHandler}/>\r\n            {/*<button onClick={addTask}>+</button>*/}\r\n            <IconButton color=\"primary\" size=\"small\" onClick={addTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan is called\")\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    function activateEditeMode() {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeTitleHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        // ? <input value={title}\r\n        //          onBlur={activateViewMode}\r\n        //          onChange={onChangeTitleHandler}\r\n        //          autoFocus/>\r\n        ? <TextField variant=\"outlined\"\r\n                     size={\"small\"}\r\n                     value={title}\r\n                     onBlur={activateViewMode}\r\n                     onChange={onChangeTitleHandler}\r\n                     autoFocus/>\r\n        :\r\n        <span onDoubleClick={activateEditeMode}>{props.title}</span>\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskType} from \"./AppWithRedux\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\n\r\ntype PropsType = {\r\n    key: string\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\n\r\nconst Task = React.memo(function (props: PropsType) {\r\n\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onClickTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todolistId)\r\n    const onClickTaskTitle = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.changeTaskTitle, props.task.id, props.todolistId])\r\n    return (\r\n        <li key={props.task.id}\r\n            className={props.task.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox onChange={onClickTaskStatus}\r\n                      checked={props.task.isDone}\r\n                      color=\"primary\"\r\n            />\r\n            <EditableSpan title={props.task.title}\r\n                          onChangeTitle={onClickTaskTitle}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n\r\n\r\nexport default Task;\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./AppWithRedux\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Task from \"./Task\";\r\n\r\n\r\ntype PropsType = {\r\n    key: string\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (tittle: string, todoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, newvalue: string) => void\r\n}\r\n\r\n\r\nconst TodoList = React.memo(function (props: PropsType) {\r\n    console.log(\"Todolist is called\")\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const addTask = useCallback((tittle: string) => {\r\n        props.addTask(tittle, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTodoListTitle = useCallback((newValue: string) => {\r\n        props.changeTodoListTitle(props.id, newValue)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    let tasksforTodoList = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksforTodoList = props.tasks.filter(task => !task.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksforTodoList = props.tasks.filter(task => task.isDone)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChangeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={() => {\r\n                    props.removeTodoList(props.id)\r\n                }}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>\r\n                {\r\n                    tasksforTodoList.map(task => <Task\r\n                            key={task.id}\r\n                            todolistId={props.id}\r\n                            task={task}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    // className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}\r\n                    color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    size={\"small\"}>All\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    size={\"small\"}>Active\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    size={\"small\"}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistID: string\r\n}\r\n\r\nexport type ChangeTodolistActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionType = RemoveTodolistActionType | AddTodolistActionType |\r\n    ChangeTodolistActionType | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodolistType>=initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodolistType = {\r\n                id: action.todolistID,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let newTodoLists = state.find(tl => tl.id === action.id)\r\n            if (newTodoLists) {\r\n                newTodoLists.title = action.title\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todoList = state.find(tl => tl.id == action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todolistId\r\n    }\r\n}\r\n\r\nexport const AddTodolistAC = (newTodolistTitle: string): AddTodolistActionType => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title: newTodolistTitle,\r\n        todolistID: v1()\r\n    }\r\n}\r\n\r\nexport const ChangeTodolistAC = (id: string, title:string): ChangeTodolistActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: id,\r\n        title: title\r\n    }\r\n}\r\n\r\nexport const ChangeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id: id,\r\n        filter: filter\r\n    }\r\n}\r\n\r\n","import {TaskStateType, TaskType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangeTaskTittleActionType = {\r\n    type: 'CHANGE-TASK-TITTLE',\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\ntype ActionType = RemoveTaskActionType |\r\n    AddTaskActionType |\r\n    ChangeTaskStatusActionType |\r\n    ChangeTaskTittleActionType |\r\n    AddTodolistActionType |\r\n    RemoveTodolistActionType\r\n\r\nconst initialState: TaskStateType =  {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':{\r\n            state[action.todoListID] = state[action.todoListID].filter(task => task.id !== action.taskID)\r\n        }\r\n            return {...state}\r\n        case 'ADD-TASK':\r\n            const newTask: TaskType = {id: v1(), title: action.title, isDone: false};\r\n            state[action.todoListID] = [newTask, ...state[action.todoListID]]\r\n            return {...state}\r\n        case 'CHANGE-TASK-STATUS':{\r\n            let todolistTasks = state[action.todoListID]\r\n            state[action.todoListID] = todolistTasks.map(task => task.id === action.taskID\r\n                ? {...task, isDone: action.isDone}\r\n                : task)\r\n            return {...state}}\r\n        case 'CHANGE-TASK-TITTLE':{\r\n            let todolistTasks = state[action.todoListID]\r\n            state[action.todoListID] = todolistTasks.map(task => task.id === action.taskID\r\n            ?{...task, title: action.title}\r\n            :task)\r\n            return {...state}}\r\n        case 'ADD-TODOLIST':{\r\n            return{...state, [action.todolistID]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST':\r\n            delete state[action.id]\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTaskAC = (taskID: string, todoListID: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskID,\r\n        todoListID\r\n    }\r\n}\r\n\r\nexport const AddTaskAC = (title: string, todoListID: string): AddTaskActionType => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\n\r\nexport const ChangeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        taskID,\r\n        isDone,\r\n        todoListID\r\n    }\r\n}\r\n\r\nexport const ChangeTaskTittleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTittleActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITTLE',\r\n        taskID,\r\n        title,\r\n        todoListID\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodolistAC,\r\n    ChangeTodolistFilterAC,\r\n    RemoveTodolistAC,\r\n    todoListsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTittleAC, RemoveTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction AppWithRedux() {\r\n    console.log(\"App is called\")\r\n    // const [tasks, setTasks] = useState<Array<TaskType>>([\r\n    //     {id: v1(), title: \"React\", isDone: false},\r\n    //     {id: v1(), title: \"HTML\", isDone: true},\r\n    //     {id: v1(), title: \"CSS\", isDone: true},\r\n    //     {id: v1(), title: \"Redux\", isDone: true},\r\n    //     {id: v1(), title: \"SaSS\", isDone: false}\r\n    // ])\r\n    const todolistID1 = v1()\r\n    const todolistID2 = v1()\r\n\r\n    // const [todoLists, dispatchTodoLists] = useReducer(todoListsReducer, [\r\n    //     {id: todolistID1, title: \"What to learn\", filter: \"all\"},\r\n    //     {id: todolistID2, title: \"What to buy\", filter: \"all\"}\r\n    // ])\r\n    //\r\n    // const [tasks, dispatchTasks] = useReducer(tasksReducer, {\r\n    //     [todolistID1]: [\r\n    //         {id: v1(), title: \"React\", isDone: false},\r\n    //         {id: v1(), title: \"HTML\", isDone: true},\r\n    //         {id: v1(), title: \"CSS\", isDone: true},\r\n    //         {id: v1(), title: \"Redux\", isDone: true},\r\n    //         {id: v1(), title: \"SaSS\", isDone: false}\r\n    //     ],\r\n    //     [todolistID2]: [\r\n    //         {id: v1(), title: \"Milk\", isDone: false},\r\n    //         {id: v1(), title: \"Bread\", isDone: true},\r\n    //         {id: v1(), title: \"Sugar\", isDone: true},\r\n    //         {id: v1(), title: \"Ice Cream\", isDone: true},\r\n    //         {id: v1(), title: \"Chese\", isDone: false}\r\n    //     ],\r\n    //\r\n    // })\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state=> state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        const action = RemoveTaskAC(taskID, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        const action = AddTaskAC(title, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        const action = ChangeTodolistFilterAC(todoListID, newFilterValue)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\r\n        const action = ChangeTaskStatusAC(taskID, isDone, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n        const action = ChangeTaskTittleAC(taskID, title, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const action = RemoveTodolistAC(todoListID)\r\n        delete tasks[todoListID]\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((todoListID: string, newvalue: string) => {\r\n        const action = ChangeTodolistAC(todoListID, newvalue)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoLists = useCallback((title: string) => {\r\n        const action = AddTodolistAC(title)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoLists}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let tasksforTodoList = tasks[tl.id]\r\n\r\n                            return (\r\n                                <Grid key={tl.id}>\r\n                                    <Paper elevation={3}\r\n                                           style={{padding: \"15px\", marginRight: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksforTodoList}\r\n                                            removeTask={removeTask}\r\n                                            addTask={addTask}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}