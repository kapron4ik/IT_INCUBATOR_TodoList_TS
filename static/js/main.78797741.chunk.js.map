{"version":3,"sources":["serviceWorker.ts","api/api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","TodoList.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addTask","trimmedTitle","trim","addItem","TextField","variant","label","helperText","size","value","onChange","e","currentTarget","onKeyDown","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","instanse","axios","create","baseURL","withCredentials","headers","taskAPI","todolistId","get","post","taskId","updateData","put","delete","todolistAPI","Task","onClickTaskTitle","useCallback","newValue","changeTaskTitle","task","id","Checkbox","changeTaskStatus","checked","Completed","New","status","removeTask","Delete","initialState","changeTaskTC","todolistID","dispatch","getState","tasks","find","description","priority","startDate","deadline","then","res","type","changeTaskTittleAC","data","item","changeTaskStatusAC","TodoList","useDispatch","useEffect","todoListID","setTasksAC","items","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tittle","changeTodoListTitle","tasksforTodoList","filter","removeTodoList","style","listStyle","paddingLeft","map","Button","App","todolists","todoLists","useSelector","state","taskID","removeTaskAC","removeTaskTC","addTaskTC","newFilterValue","todolistid","newvalue","todolistis","changeTodolistAC","addTodoLists","newTodolist","addTodolistTC","className","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","Paper","elevation","marginRight","rootReducer","combineReducers","action","stateCopy","todoListId","newTasks","forEach","newTodoList","newTodoLists","todoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.78797741.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { UpdateTasksDataType } from \"../types/entities\";\r\n\r\ntype ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype CreateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n}\r\n\r\ntype UpdateTodolistResponseType = {\r\n    data: {}\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\ntype DeleteTodolistResponseType = {\r\n    data: {}\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n    const settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4ea25f42-325c-423b-b922-486c47047752'\r\n    }\r\n}\r\n\r\nconst instanse = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        const promise = instanse.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        const promise = instanse.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n        return promise\r\n    },\r\n    updateTask(todolistId: string, taskId: string, updateData:UpdateTasksDataType) {\r\n        const promise = instanse.put<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {...updateData})\r\n        return promise\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instanse.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodos() {\r\n        return instanse.get<Array<TodolistType>>(`todo-lists/`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instanse.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title: title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instanse.put<ResponseType<{item: TodolistType}>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instanse.delete<ResponseType<{item: TodolistType }>>(`todo-lists/${todolistId}`)\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addTask()\r\n        if (e.key === \"Escape\") setTitle(\"\")\r\n    }\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(trimmedTitle)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError('Title is requaired')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       error={!!error}\r\n                // className={error ? \"error\" : \"\"}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       size={\"small\"}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={onKeyDownHandler}/>\r\n            {/*<button onClick={addTask}>+</button>*/}\r\n            <IconButton color=\"primary\" size=\"small\" onClick={addTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    function activateEditeMode() {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    function onChangeTitleHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        // ? <input value={title}\r\n        //          onBlur={activateViewMode}\r\n        //          onChange={onChangeTitleHandler}\r\n        //          autoFocus/>\r\n        ? <TextField variant=\"outlined\"\r\n                     size={\"small\"}\r\n                     value={title}\r\n                     onBlur={activateViewMode}\r\n                     onChange={onChangeTitleHandler}\r\n                     autoFocus/>\r\n        :\r\n        <span onDoubleClick={activateEditeMode}>{props.title}</span>\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {TaskType, TaskStatuses} from \"./api/api\";\r\n\r\n\r\ntype PropsType = {\r\n    key: string\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTaskStatus: (todoListID: string, taskID: string, status: number) => void\r\n    changeTaskTitle: (todoListID: string, taskID: string, title: string) => void\r\n}\r\n\r\n\r\nconst Task = React.memo(function (props: PropsType) {\r\n\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onClickTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(props.todolistId, props.task.id,\r\n        e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New)\r\n    const onClickTaskTitle = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, newValue)\r\n    },[props.changeTaskTitle, props.task.id, props.todolistId])\r\n    return (\r\n        <li key={props.task.id}\r\n            // className={props.task.isDone ? \"is-done\" : \"\"}\r\n        >\r\n            <Checkbox onChange={onClickTaskStatus}\r\n                      checked={props.task.status === TaskStatuses.Completed}\r\n                      color=\"primary\"\r\n            />\r\n            <EditableSpan title={props.task.title}\r\n                          onChangeTitle={onClickTaskTitle}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n\r\n\r\nexport default Task;\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {TaskStateType} from \"../AppWithRedux\";\r\nimport {TodolistType, DispathActionType, UpdateTasksDataType} from \"../types/entities\";\r\nimport {taskAPI, TaskType} from \"../api/api\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nexport type SetTaskActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todoListID: string\r\n}\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: any\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangeTaskTittleActionType = {\r\n    type: 'CHANGE-TASK-TITTLE',\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nconst initialState: TaskStateType = {} //Тип изменить\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: DispathActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListID] = stateCopy[action.todoListID].filter(task => task.id !== action.taskID)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            debugger\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            const newTasks = [action.task, ...tasks]\r\n            stateCopy[action.task.todoListId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            const newTasks = tasks.map(task => task.id === action.task.id\r\n                ? {...task, status: action.task.status}\r\n                : task)\r\n            stateCopy[action.task.todoListId] = newTasks\r\n            return stateCopy\r\n        }\r\n        // case 'CHANGE-TASK-TITTLE': {\r\n        //     let todolistTasks = state[action.todoListID]\r\n        //     state[action.todoListID] = todolistTasks.map(task => task.id === action.taskID\r\n        //         ? {...task, title: action.title}\r\n        //         : task)\r\n        //     return {...state}\r\n        // }\r\n        case 'CHANGE-TASK-TITTLE': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            const newTasks = tasks.map(task => task.id === action.task.id\r\n                ? {...task, title: action.task.title}\r\n                : task)\r\n            stateCopy[action.task.todoListId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.newTodolist.id]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            delete state[action.id]\r\n            return {...state}\r\n        }\r\n        case 'GET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl: TodolistType) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListID] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action creator\r\nexport const removeTaskAC = (todoListID: string, taskID: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        todoListID,\r\n        taskID\r\n    } as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        task\r\n    } as const\r\n}\r\n// export const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string) => {\r\n//     return {\r\n//         type: 'CHANGE-TASK-STATUS',\r\n//         taskID,\r\n//         isDone,\r\n//         todoListID\r\n//     } as const\r\n// }\r\nexport const changeTaskStatusAC = (task: TaskType) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        task\r\n    } as const\r\n}\r\n// export const changeTaskTittleAC = (taskID: string, title: string, todoListID: string) => {\r\n//     return {\r\n//         type: 'CHANGE-TASK-TITTLE',\r\n//         taskID,\r\n//         title,\r\n//         todoListID\r\n//     } as const\r\n// }\r\nexport const changeTaskTittleAC = (task: TaskType) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITTLE',\r\n        task\r\n    } as const\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListID: string) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        tasks,\r\n        todoListID\r\n    } as const\r\n}\r\n\r\n//Thunk creator\r\nexport const fetchTasksTC = (todoListID: string) => (dispatch: Dispatch) => {\r\n    taskAPI.getTasks(todoListID)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todoListID))\r\n        })\r\n}\r\nexport const removeTaskTC = (todoListID: string, taskID: string) => (dispatch: Dispatch) => {\r\n    taskAPI.deleteTask(todoListID, taskID)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(todoListID, taskID))\r\n        })\r\n}\r\nexport const addTaskTC = (todoListID: string, title: string) => (dispatch: Dispatch) => {\r\n    taskAPI.createTask(todoListID, title)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const changeTaskTC = (todolistID: string, taskId: string, updateData: UpdateTasksDataType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const tasks = state.tasks\r\n        const tasksForCurrentTodoList = tasks[todolistID]\r\n        let task = tasksForCurrentTodoList.find(task => task.id === taskId)\r\n\r\n        if (task){\r\n            taskAPI.updateTask(todolistID, taskId, {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...updateData})\r\n                .then(res => {\r\n                    debugger\r\n                    dispatch(changeTaskTittleAC(res.data.data.item))\r\n                    dispatch(changeTaskStatusAC(res.data.data.item))\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Task from \"./Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {FilterValuesType} from \"./types/entities\";\r\nimport {TaskStatuses, TaskType} from \"./api/api\";\r\n\r\n\r\ntype PropsType = {\r\n    key: string\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (tittle: string, todoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (todoListID: string, taskID: string, status: number) => void\r\n    changeTaskTitle: (todoListID: string, taskID: string, title: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, newvalue: string) => void\r\n}\r\n\r\n\r\nconst TodoList = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const addTask = useCallback((tittle: string) => {\r\n        props.addTask(tittle, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTodoListTitle = useCallback((newValue: string) => {\r\n        props.changeTodoListTitle(props.id, newValue)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    let tasksforTodoList = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksforTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksforTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChangeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={() => {\r\n                    props.removeTodoList(props.id)\r\n                }}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>\r\n                {\r\n                    tasksforTodoList.map(task => <Task\r\n                            key={task.id}\r\n                            todolistId={props.id}\r\n                            task={task}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    // className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}\r\n                    color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    size={\"small\"}>All\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    size={\"small\"}>Active\r\n                </Button>\r\n                <Button\r\n                    // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    size={\"small\"}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {DispathActionType, FilterValuesType, TodolistDomainType, TodolistType} from \"../types/entities\";\r\nimport {todolistAPI} from \"../api/api\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodolistDomainType>=initialState, action: DispathActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':{\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            const newTodoList: TodolistDomainType = {\r\n                ...action.newTodolist,\r\n                filter: \"all\"\r\n            }\r\n            return [newTodoList, ...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let newTodoLists = state.find(tl => tl.id === action.id)\r\n            if (newTodoLists) {\r\n                newTodoLists.title = action.title\r\n            }\r\n            return [...state]\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todoList = state.find(tl => tl.id == action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            }\r\n            return [...state]\r\n\r\n        case 'GET-TODOLISTS': {\r\n            return action.todolists.map(tl=> ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action creator\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todolistId\r\n    } as const\r\n}\r\nexport const addTodolistAC = (newTodolist: TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        newTodolist\r\n    } as const\r\n}\r\nexport const changeTodolistAC = (id: string, title:string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: id,\r\n        title: title\r\n    } as const\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id: id,\r\n        filter: filter\r\n    } as const\r\n}\r\nexport const getTodolistAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'GET-TODOLISTS', todolists} as const\r\n}\r\n\r\n//Thunk creator\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodos()\r\n        .then((res)=>{\r\n            dispatch(getTodolistAC(res.data))\r\n        })\r\n}\r\nexport const addTodolistTC =(title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodolist(title)\r\n        .then((res)=>{\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistid: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodolist(todolistid)\r\n        .then((res)=>{\r\n            dispatch(removeTodolistAC(todolistid))\r\n        })\r\n}\r\nexport const updateTodolistTC = (todolistis: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolist(todolistis, title)\r\n        .then((res)=> {\r\n            dispatch(changeTodolistAC(todolistis, title))\r\n        })\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {FilterValuesType, TodolistType, TodolistDomainType} from './types/entities';\r\nimport {getTodolistsTC, changeTodolistFilterAC, deleteTodolistTC, updateTodolistTC, addTodolistTC } from './state/todolists-reducer';\r\nimport {\r\n    removeTaskTC,\r\n    addTaskTC, changeTaskTC\r\n} from './state/tasks-reducer';\r\nimport {TaskType} from \"./api/api\";\r\n\r\n// export type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC())\r\n    }, [])\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(todoListID, taskID))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(todoListID, title))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(todoListID, newFilterValue))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((todoListID: string, taskID: string, status: number) => {\r\n        // dispatch(changeTaskStatusAC(taskID, isDone, todoListID))\r\n        dispatch(changeTaskTC(todoListID, taskID, {status:2}))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((todoListID: string, taskID: string, title: string) => {\r\n        dispatch(changeTaskTC(todoListID, taskID, {title}))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        // delete tasks[todoListID]\r\n        dispatch(deleteTodolistTC(todoListID))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((todoListID: string, newvalue: string) => {\r\n        dispatch(updateTodolistTC(todoListID, newvalue))\r\n    }, [dispatch])\r\n    const addTodoLists = useCallback((title: string) => {\r\n        // dispatch(AddTodolistAC(title))\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoLists}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl  => {\r\n                            let tasksforTodoList = tasks[tl.id]\r\n\r\n                            return (\r\n                                <Grid key={tl.id}>\r\n                                    <Paper elevation={3}\r\n                                           style={{padding: \"15px\", marginRight: \"15px\"}}>\r\n                                        <TodoList\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksforTodoList}\r\n                                            removeTask={removeTask}\r\n                                            addTask={addTask}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeTaskStatus}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}